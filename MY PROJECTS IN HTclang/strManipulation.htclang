func str *StrSplit(str *string, str delimiter, int count) {
    int currentCount := 0
    str *start := string
    size_t len := strlen(string)

    size_t substring_len0 := 0
    Loop, % len {
        if (string[A_Index] = delimiter) {
            currentCount++
            if (currentCount = count - 1) {
                substring_len0 := A_Index + 1
                start := &string[A_Index + 1]
                break
            }
        }
    }

    size_t substring_len := 0
    Loop, % len {
        if (start[A_Index] = delimiter) {
            substring_len := A_Index
            start[A_Index] := (char)0
            break
        }
    }

    str *out := malloc(substring_len + 1)
    if (!out) {
        return null
    }
    strncpy(out, start, substring_len)
    out[substring_len] := (char)0
    string[substring_len0 + substring_len] := delimiter
    return out
}

func int countChars(str *string, str delimiter) {
    int count := 0
    int len := strlen(string)
    Loop, % len {
        if (string[A_Index] = delimiter) {
            count++
        }
    }
    return count
}

func str *StringTrimLeft(str *string, int count) {

str *line := string

line := &string[count]

str *out := malloc(strlen(string) + 1)
if (!out) {
    perror("malloc failed")
    return null
}
strcpy(out, line)

return out
}

func str *StringTrimRight(str *string, int count) {
size_t lenToTrim := strlen(string) - count

str *out := malloc(lenToTrim + 1)
if (!out) {
    perror("malloc failed")
    return null
}
strcpy(out, string)
out[lenToTrim] := (char)0
return out

}

func str *StrLower(str *string) {

size_t len := strlen(string)

str *out := malloc(len + 1)
if (!out) {
    perror("malloc failed")
    return null
}

Loop, % len {
out[A_Index] := tolower(string[A_Index])
}

out[len] := (char)0
return out

}

func str *StrTitleCase(str *string) {

size_t len := strlen(string)

str *out := malloc(len + 1)
if (!out) {
    perror("malloc failed")
    return null
}

Loop, % len {

if (A_Index = 0) {
    out[A_Index] := toupper(string[A_Index])
}
else
{
if (string[A_Index - 1] = ' ')
{
out[A_Index] := toupper(string[A_Index])
}
else
{
out[A_Index] := tolower(string[A_Index])
}

}


}

out[len] := (char)0

return out
}

func str *Trim(str *string) {

size_t len := strlen(string)

str *start := string

size_t substring_len0 := 0
size_t substring_len := 0

int beenHere := 0
Loop, % len {

if (string[A_Index] != (char)32 && string[A_Index] != (char)9 && string[A_Index] != (char)10 && string[A_Index] != (char)13 && string[A_Index] != (char)11 and beenHere = 0)
{
beenHere := 1
substring_len0 := A_Index
start := &string[A_Index]
}

}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
beenHere := 0

size_t last := 0
size_t REALlast := 0
str strTemp := 0
Loop, % len {
last := len - 1 - A_Index

if (string[last] != (char)32 && string[last] != (char)9 && string[last] != (char)10 && string[last] != (char)13 && string[last] != (char)11 and beenHere = 0)
{
beenHere := 1
substring_len := last
strTemp := start[last]
start[last] := (char)0
REALlast := last
}

}

    str *out := malloc((substring_len - substring_len0) + 1)
    if (!out) {
        return null
    }
    strncpy(out, start, substring_len - substring_len0)
    out[substring_len - substring_len0] := (char)0
    string[REALlast] := strTemp
    return out
}

func size_t InStr(str *string, str *what) {
    size_t len := strlen(string)
    size_t lenWhat := strlen(what)
    
    if (lenWhat = 0 || len < lenWhat) {
        return 0 
    }
    
    Loop, % len - lenWhat + 1
    {
        if (strncmp(&string[A_Index], what, lenWhat) = 0) {
            return A_Index + 1
        }
    }
}


func str *SubStr(str *string, size_t num1, size_t num2) {

    if (!string or num1 < 1 or num2 < 0) { 
        return null
    }

    size_t len := strlen(string)
    if ((size_t)num1 > len) {   
        return null
    }

    ; make it 1 indexed
    num1--

    str *line := string
    line := &string[num1]

    str *out := malloc(num2 + 1)
    if (!out) {
        perror("malloc failed")
        return null
    }
    strncpy(out, line, num2)
    out[num2] := (char)0
    return out
}
func str *StrReplace(str *string, str *find, str *replace) {

    size_t len := strlen(string)
    size_t lenFind := strlen(find)
    size_t lenReplace := strlen(replace)
    size_t count := 0

    Loop, % len - lenFind + 1
    {
        if (strncmp(&string[A_Index], find, lenFind) = 0) {
            count++
        }
    }

    ;printf("%d`n", count)

    size_t outLen := len + count * (lenReplace - lenFind)
    str *out := malloc(outLen + 1) ; +1 for null terminator
    size_t doWeAppend := 0
    size_t diff := 0

    Loop, % outLen
    {
        if ((A_Index + diff) < len) and (strncmp(&string[A_Index + diff], find, lenFind) = 0) and (doWeAppend = 0) {
            doWeAppend := lenReplace
        }

        if (doWeAppend > 0) {
            out[A_Index] := replace[lenReplace - doWeAppend]
            doWeAppend--
            if (doWeAppend = 0) {
                diff += lenFind - lenReplace
            }
        }
        else {
            out[A_Index] := string[A_Index + diff]
        }
    }

    out[outLen] := (char)0
    return out
}


___c start

int is_word_boundary_char(char c) {
    return c == '\0' || !(isalnum((unsigned char)c) || c == '_');
}

char* StrReplaceBoundaries(const char* input, const char* target, const char* replacement) {
    // 1. Validate input parameters
    if (input == NULL) {
        // fprintf(stderr, "Error: input string is NULL.\n");
        return NULL;
    }
    if (target == NULL) {
        // fprintf(stderr, "Error: target string is NULL.\n");
        // Alternatively, could strdup(input) if NULL target means "find nothing".
        // For strictness, treating as an error.
        return NULL;
    }
    if (replacement == NULL) {
        // fprintf(stderr, "Error: replacement string is NULL.\n");
        return NULL;
    }

    size_t in_len = strlen(input);
    size_t target_len = strlen(target);
    size_t repl_len = strlen(replacement);

    // 2. Handle empty target string: usually means "do nothing" or "insert everywhere".
    // Common behavior for "find and replace" with empty find is to return original.
    if (target_len == 0) {
        char* copy = strdup(input); // strdup allocates memory
        // if (copy == NULL) { perror("strdup failed for empty target case"); }
        return copy; // Returns NULL if strdup fails
    }

    // 3. Initial allocation for output string
    // Start with enough for the original string; realloc will grow if needed.
    size_t out_cap = in_len + 1; // +1 for null terminator
    char* output = malloc(out_cap);
    if (output == NULL) {
        // perror("Initial malloc failed for output string");
        return NULL;
    }
    size_t out_len = 0;

    // 4. Iterate through the input string
    for (size_t i = 0; i < in_len;) {
        // Check for a match at word boundaries
        // Condition: (left_boundary) AND (target fits AND matches) AND (right_boundary)
        if (
            (i == 0 || is_word_boundary_char(input[i - 1])) && // Left boundary
            (i + target_len <= in_len) && // Ensure target can fit within remaining input
            strncmp(&input[i], target, target_len) == 0 &&       // Target matches
            is_word_boundary_char(input[i + target_len])    // Right boundary
                                                                 // (input[in_len] is '\0', handled by is_word_boundary_char)
        ) {
            // --- Match found: append replacement ---
            // Calculate space needed for the replacement
            // Check for overflow: out_len + repl_len
            if (out_len > SIZE_MAX - repl_len) {
                free(output); return NULL; // Overflow in calculating new length
            }
            size_t needed_content_len = out_len + repl_len;

            // Check for overflow: needed_content_len + 1 (for null terminator)
            if (needed_content_len > SIZE_MAX - 1) {
                free(output); return NULL; // Overflow for buffer size
            }
            size_t required_buffer_size = needed_content_len + 1;

            // Reallocate if current capacity is insufficient
            if (required_buffer_size > out_cap) {
                size_t new_cap = out_cap;
                // Double capacity until sufficient, with overflow checks
                while (new_cap < required_buffer_size) {
                    if (new_cap > SIZE_MAX / 2) { // Check before doubling
                        new_cap = SIZE_MAX; // Try to allocate max possible
                        break;
                    }
                    new_cap *= 2;
                }
                // If doubling still wasn't enough (e.g. new_cap hit SIZE_MAX but still too small)
                if (new_cap < required_buffer_size) {
                    free(output); return NULL; // Cannot allocate enough
                }

                char* temp = realloc(output, new_cap);
                if (temp == NULL) {
                    free(output); // Original output is still valid but unneeded
                    return NULL;  // Realloc failed
                }
                output = temp;
                out_cap = new_cap;
            }

            if (repl_len > 0) { // memcpy with 0 length is a no-op but explicit check is fine
                memcpy(&output[out_len], replacement, repl_len);
            }
            out_len += repl_len;
            i += target_len; // Move past the matched target in input
        } else {
            // --- No match: copy one character from input ---
            // Calculate space needed for one more character
            // Check for overflow: out_len + 1
            if (out_len > SIZE_MAX - 1) {
                free(output); return NULL; // Overflow in calculating new length
            }
            size_t needed_content_len = out_len + 1;

            // Check for overflow: needed_content_len + 1 (for null terminator)
            if (needed_content_len > SIZE_MAX - 1) {
                free(output); return NULL; // Overflow for buffer size
            }
            size_t required_buffer_size = needed_content_len + 1;

            // Reallocate if current capacity is insufficient
            if (required_buffer_size > out_cap) {
                size_t new_cap = out_cap;
                while (new_cap < required_buffer_size) {
                    if (new_cap > SIZE_MAX / 2) {
                        new_cap = SIZE_MAX;
                        break;
                    }
                    new_cap *= 2;
                }
                if (new_cap < required_buffer_size) {
                    free(output); return NULL;
                }

                char* temp = realloc(output, new_cap);
                if (temp == NULL) {
                    free(output);
                    return NULL;
                }
                output = temp;
                out_cap = new_cap;
            }
            
            // The loop condition `i < in_len` ensures input[i] is valid.
            output[out_len++] = input[i++];
        }
    }

    // 5. Null-terminate the output string
    // Capacity for this was ensured by `required_buffer_size = ... + 1`
    output[out_len] = '\0';

    // Optional: Trim excess capacity. Can sometimes fail.
    // If it fails, the slightly larger buffer is still valid.
    // char* trimmed_output = realloc(output, out_len + 1);
    // if (trimmed_output != NULL) {
    //     output = trimmed_output;
    // } // Else, use the existing output buffer

    return output;
}

___c end


func str **arrSplit(str *string, str del) {

size_t countARR := countChars(string, del) + 1

str **ARR := malloc(countARR * sizeof(char *))


size_t len := strlen(string)

size_t count := 0
size_t countTemp := 0


str *temp := malloc(len + 1)
if (!temp) {
    perror("malloc failed")
    return null
}

Loop, % len {
temp[A_Index] := 0
}

Loop, % len + 2 {

if (A_Index = len) {

ARR[count] := strdup(temp)
count++
memset(temp, 0, len)
countTemp := 0

}
else if (A_Index = len + 1) {

temp[countTemp] := (char)0
countTemp++




}
else
{

if (string[A_Index] = del) {
ARR[count] := strdup(temp)
count++
memset(temp, 0, len)
countTemp := 0
}
else
{
temp[countTemp] := string[A_Index]
countTemp++
}

}



}
free(temp)
return ARR
}



func str **resize(str **myArr, size_t *capacity) {
    size_t newCapacity := (*capacity) * 2
    str **newArr := realloc(myArr, newCapacity * sizeof(char *))
    if (!newArr) {
        perror("realloc failed");
        ; Don't return old pointer if realloc fails
        return null
    }
    ; Update capacity if realloc succeeded
    *capacity := newCapacity
    return newArr
}



main
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
str *myStr := malloc(30)
strcpy(myStr, "HeLLo MaN whats UP")

str *myStr2 := malloc(50)
strcpy(myStr2, "    - hadsfouSDbkhjdsfdwaesdf")
str *myStr3 := malloc(61)
strcpy(myStr3, "     hadsfouSDbkhjdsfdwaesdf      ")

printf("%d`n", countChars(myStr, ' '))

str *res := StrSplit(myStr, ' ', 2)
str *res2 := StringTrimLeft(myStr, 2)
str *res3 := StringTrimRight(myStr, 4)
str *res4 := StrLower(myStr)
str *res5 := StrTitleCase(myStr)
str *res6 := Trim(myStr2)
str *res7 := Trim(myStr3)

printf("%s`n", res)
printf("%s`n", res2)
printf("%s`n", res3)
printf("%s`n", res4)
printf("%s`n", res5)
printf("%s`n", res6)
printf("%s`n", res7)
printf("%s`n", myStr)
printf("%s`n", myStr2)
printf("%s`n", myStr3)
printf("%zu`n", InStr("hello man whats up", "man"))
printf("%s`n", SubStr("hello man whats up", 1, 4))
printf("%s`n", StrReplace("hello man whats up man", "man", "bro"))
printf("%s`n", StrReplace("hello man whats up man", "man", "br"))
printf("%s`n", StrReplace("hello man whats up man", "man", "br0o"))

printf("%s`n", StrReplaceBoundaries("var", "var", "replaced"));         ; // "replaced"
printf("%s`n", StrReplaceBoundaries("var foo", "var", "replaced"));     ; // "replaced foo"
printf("%s`n", StrReplaceBoundaries("foo var", "var", "replaced"));     ; // "foo replaced"
printf("%s`n", StrReplaceBoundaries("foo var bar", "var", "replaced")); ; // "foo replaced bar"
printf("%s`n", StrReplaceBoundaries("foobar", "var", "replaced"));      ; // "foobar"
printf("%s`n", StrReplaceBoundaries("my_var", "var", "replaced"));      ; // "my_var"
printf("%s`n", StrReplaceBoundaries("var123", "var", "replaced"));      ; // "var123"
printf("%s`n", StrReplaceBoundaries("123 var_abc 456", "var", "replaced")); ; // "123 replaced_abc 456"
printf("%s`n", StrReplaceBoundaries("_var_", "var", "replaced"));       ; // "_replaced_"
printf("%s`n", StrReplaceBoundaries("var,var.var;var", "var", "replaced")); ; // "replaced,replaced.replaced;replaced"

printf("%s`n", StrReplaceBoundaries("(var)", "var", "replaced"));         ; // "(replaced)"
printf("%s`n", StrReplaceBoundaries("func(var)", "var", "replaced"));     ; // "func(replaced)"
printf("%s`n", StrReplaceBoundaries("(var+var)", "var", "replaced"));     ; // "(replaced+replaced)"
printf("%s`n", StrReplaceBoundaries("var()", "var", "replaced"));         ; // "replaced()"
printf("%s`n", StrReplaceBoundaries("(123)var(456)", "var", "replaced")); ; // "(123)replaced(456)"
printf("%s`n", StrReplaceBoundaries("func(var1, var2)", "var1", "R1"));   ; // "func(R1, var2)"
printf("%s`n", StrReplaceBoundaries("func(var1, var2)", "var2", "R2"));   ; // "func(var1, R2)"
printf("%s`n", StrReplaceBoundaries("var;var.var,var(var)", "var", "R")); ; // "R;R.R,R(R)"
printf("%s`n", StrReplaceBoundaries("var(var(var))", "var", "R"));        ; // "R(R(R))"
printf("%s`n", StrReplaceBoundaries("((var))", "var", "replaced"));       ; // "((replaced))"

; Allocate 20 bytes for an 18-char string (+1 for original '\0', +1 for arrSplit's temporary delimiter modification).
; arrSplit needs this extra byte to safely append a temporary delimiter and then a new '\0' in-place.
char var1[20] := "hello man whats up"
str **arr := arrSplit(var1, ' ')
; back to normal
printf("|%s|`n", var1)
; add +1 since there are 3 spaces but 4 words — that makes sense.
int loopLen := countChars(var1, ' ') + 1
printf("%d`n", loopLen)
Loop, % loopLen {
    printf("%s`n", arr[A_Index])
    printf("%d`n", A_Index)

}
; back to normal
printf("|%s|`n", var1)

Loop, % loopLen {
free(arr[A_Index])
}
free(arr)

free(myStr)
free(myStr2)
free(myStr3)
free(res)
free(res2)
free(res3)
free(res4)
free(res5)
free(res6)
free(res7)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


str *var11 := strdup("hello man whats up")
if (!var11) {
    perror("malloc failed")
    return -1
}
; equivalent to StringTrimLeft
memmove(var11, &var11[6], strlen(&var11[6]) + 1)
; equivalent to StringTrimRight
var11[strlen(var11) - 3] := 0
; will have "man whats"
printf("|%s|`n", var11)
free(var11)

;;;;;;;;;;;;;;;;;;;;;;;;;;;; try resize


size_t arr1_s := 5
size_t arr1_i := 0
str **arr1 := malloc(arr1_s * sizeof(char *))

arr1[arr1_i++] := strdup("hello")
arr1[arr1_i++] := strdup("man")
arr1[arr1_i++] := strdup("whats")
arr1[arr1_i++] := strdup("up")

arr1 := resize(arr1, &arr1_s)

arr1[arr1_i++] := strdup("hello")
arr1[arr1_i++] := strdup("man")
arr1[arr1_i++] := strdup("whats")
arr1[arr1_i++] := strdup("up")


Loop, % arr1_i {
printf("%s`n", arr1[A_Index])
}
; free arr1
Loop, % arr1_i {
free(arr1[A_Index])
}

free(arr1)


;;;;;;;;;;;;;;;;;;;;;;;






; Allocate 20 bytes for an 18-char string (+1 for original '\0', +1 for arrSplit's temporary delimiter modification).
; arrSplit needs this extra byte to safely append a temporary delimiter and then a new '\0' in-place.
str *var12 := strdup("hello man whats up")
str **arr2 := arrSplit(var12, ' ')
; back to normal
printf("|%s|`n", var12)
; add +1 since there are 3 spaces but 4 words — that makes sense.
int loopLen2 := countChars(var12, ' ') + 1
printf("%d`n", loopLen2)
Loop, % loopLen2 {
    printf("%s`n", arr2[A_Index])
    printf("%d`n", A_Index)

}
; back to normal
printf("|%s|`n", var12)
free(var12)
Loop, % loopLen2 {
free(arr2[A_Index])
}
free(arr2)


